/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';

export interface IPackagesApi {
    get(): Promise<PackagesVm>;
    install(command: InstallPackageCommand): Promise<string>;
}

export class PackagesApi implements IPackagesApi {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Promise<PackagesVm> {
        let url_ = this.baseUrl + "/api/Packages";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<PackagesVm> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PackagesVm.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PackagesVm>(<any>null);
    }

    install(command: InstallPackageCommand): Promise<string> {
        let url_ = this.baseUrl + "/api/Packages/Install";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processInstall(_response);
        });
    }

    protected processInstall(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }
}

export interface IUserOwnedPackagesApi {
    get(): Promise<UserOwnedPackagesVm>;
    checkForUpdate(version: string | null | undefined, packageId: string | null | undefined): Promise<CheckForUpdateVm>;
}

export class UserOwnedPackagesApi implements IUserOwnedPackagesApi {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Promise<UserOwnedPackagesVm> {
        let url_ = this.baseUrl + "/api/UserOwnedPackages";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<UserOwnedPackagesVm> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserOwnedPackagesVm.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserOwnedPackagesVm>(<any>null);
    }

    checkForUpdate(version: string | null | undefined, packageId: string | null | undefined): Promise<CheckForUpdateVm> {
        let url_ = this.baseUrl + "/api/UserOwnedPackages/CheckForUpdate?";
        if (version !== undefined)
            url_ += "version=" + encodeURIComponent("" + version) + "&"; 
        if (packageId !== undefined)
            url_ += "packageId=" + encodeURIComponent("" + packageId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCheckForUpdate(_response);
        });
    }

    protected processCheckForUpdate(response: AxiosResponse): Promise<CheckForUpdateVm> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CheckForUpdateVm.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CheckForUpdateVm>(<any>null);
    }
}

export class PackagesVm implements IPackagesVm {
    packages?: PackageDto[] | undefined;

    constructor(data?: IPackagesVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["packages"])) {
                this.packages = [] as any;
                for (let item of _data["packages"])
                    this.packages!.push(PackageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PackagesVm {
        data = typeof data === 'object' ? data : {};
        let result = new PackagesVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.packages)) {
            data["packages"] = [];
            for (let item of this.packages)
                data["packages"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPackagesVm {
    packages?: PackageDto[] | undefined;
}

export class PackageDto implements IPackageDto {
    packageId?: string | undefined;
    latestVersion?: string | undefined;
    name?: string | undefined;
    imageUrl?: string | undefined;
    description?: string | undefined;

    constructor(data?: IPackageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.packageId = _data["packageId"];
            this.latestVersion = _data["latestVersion"];
            this.name = _data["name"];
            this.imageUrl = _data["imageUrl"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): PackageDto {
        data = typeof data === 'object' ? data : {};
        let result = new PackageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["packageId"] = this.packageId;
        data["latestVersion"] = this.latestVersion;
        data["name"] = this.name;
        data["imageUrl"] = this.imageUrl;
        data["description"] = this.description;
        return data; 
    }
}

export interface IPackageDto {
    packageId?: string | undefined;
    latestVersion?: string | undefined;
    name?: string | undefined;
    imageUrl?: string | undefined;
    description?: string | undefined;
}

export class InstallPackageCommand implements IInstallPackageCommand {
    packageId?: string | undefined;

    constructor(data?: IInstallPackageCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.packageId = _data["packageId"];
        }
    }

    static fromJS(data: any): InstallPackageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InstallPackageCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["packageId"] = this.packageId;
        return data; 
    }
}

export interface IInstallPackageCommand {
    packageId?: string | undefined;
}

export class UserOwnedPackagesVm implements IUserOwnedPackagesVm {
    userOwnedPackages?: UserOwnedPackageDto[] | undefined;

    constructor(data?: IUserOwnedPackagesVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["userOwnedPackages"])) {
                this.userOwnedPackages = [] as any;
                for (let item of _data["userOwnedPackages"])
                    this.userOwnedPackages!.push(UserOwnedPackageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserOwnedPackagesVm {
        data = typeof data === 'object' ? data : {};
        let result = new UserOwnedPackagesVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.userOwnedPackages)) {
            data["userOwnedPackages"] = [];
            for (let item of this.userOwnedPackages)
                data["userOwnedPackages"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserOwnedPackagesVm {
    userOwnedPackages?: UserOwnedPackageDto[] | undefined;
}

export class UserOwnedPackageDto implements IUserOwnedPackageDto {
    packageId?: string | undefined;
    name?: string | undefined;
    version?: string | undefined;

    constructor(data?: IUserOwnedPackageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.packageId = _data["packageId"];
            this.name = _data["name"];
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): UserOwnedPackageDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserOwnedPackageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["packageId"] = this.packageId;
        data["name"] = this.name;
        data["version"] = this.version;
        return data; 
    }
}

export interface IUserOwnedPackageDto {
    packageId?: string | undefined;
    name?: string | undefined;
    version?: string | undefined;
}

export class CheckForUpdateVm implements ICheckForUpdateVm {
    hasAvailable?: boolean;
    version?: string | undefined;

    constructor(data?: ICheckForUpdateVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hasAvailable = _data["hasAvailable"];
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): CheckForUpdateVm {
        data = typeof data === 'object' ? data : {};
        let result = new CheckForUpdateVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hasAvailable"] = this.hasAvailable;
        data["version"] = this.version;
        return data; 
    }
}

export interface ICheckForUpdateVm {
    hasAvailable?: boolean;
    version?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}